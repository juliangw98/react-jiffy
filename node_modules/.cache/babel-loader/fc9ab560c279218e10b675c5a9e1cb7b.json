{"ast":null,"code":"import _objectSpread from \"/Users/julianwieckardt/Desktop/jiffy/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/julianwieckardt/Desktop/jiffy/src/App.js\";\nimport React, { Component } from \"react\";\nimport loader from \"./images/loader.svg\";\nimport Gif from \"./Gif\";\n\nconst Header = () => React.createElement(\"div\", {\n  className: \"header grid\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 6\n  },\n  __self: this\n}, React.createElement(\"h1\", {\n  className: \"title\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 7\n  },\n  __self: this\n}, \"Jiffy\"));\n\nconst UserHint = ({\n  loading,\n  hintText\n}) => React.createElement(\"div\", {\n  className: \"user-hint\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 11\n  },\n  __self: this\n}, loading ? React.createElement(\"img\", {\n  className: \"block mx-auto\",\n  src: loader,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12\n  },\n  __self: this\n}) : hintText);\n\nconst randomChoice = arr => {\n  const randIndex = Math.floor(Math.random() * arr.length);\n  return arr[randIndex];\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.searchGiphy = async searchTerm => {\n      this.setState({\n        loading: true\n      });\n\n      try {\n        const response = await fetch(\"https://api.giphy.com/v1/gifs/search?api_key=BNBQdaOJdcjRkyZ8t4aavRBRM4zES6qX&q=\".concat(searchTerm, \"&limit=25&offset=0&rating=PG-13&lang=en\"));\n\n        const _ref = await response.json(),\n              data = _ref.data;\n\n        if (!data.length) {\n          throw \"Nothing found for \".concat(searchTerm);\n        }\n\n        const randomGif = randomChoice(data);\n        console.log({\n          randomGif\n        });\n        this.setState((prevState, props) => _objectSpread({}, prevState, {\n          gifs: [...prevState.gifs, randomGif],\n          loading: false,\n          hintText: \"Hit enter to see more \".concat(searchTerm)\n        }));\n      } catch (error) {\n        this.setState((prevState, props) => _objectSpread({}, prevState, {\n          hintText: error,\n          loading: false\n        }));\n        console.log(error);\n      }\n    };\n\n    this.handleChange = event => {\n      const value = event.target.value;\n      this.setState((prevState, props) => _objectSpread({}, prevState, {\n        searchTerm: value,\n        hintText: value.length > 2 ? \"hit enter to search \".concat(value) : \"\"\n      }));\n    };\n\n    this.handleKeyPress = event => {\n      const value = event.target.value;\n\n      if (value.length > 2 && event.key === \"Enter\") {\n        this.searchGiphy(value);\n      }\n    };\n\n    this.clearSearch = () => {\n      this.setState((prevState, props) => _objectSpread({}, prevState, {\n        searchTerm: \"\",\n        hintText: \"\",\n        gifs: []\n      }));\n    };\n\n    this.state = {\n      loading: false,\n      searchTerm: \"\",\n      hintText: \"\",\n      gifs: []\n    };\n  }\n\n  render() {\n    const _this$state = this.state,\n          searchTerm = _this$state.searchTerm,\n          gif = _this$state.gif;\n    return React.createElement(\"div\", {\n      className: \"page\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(Header, {\n      clearSearch: this.clearSearch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"search grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, this.state.gifs.map(gif => React.createElement(Gif, Object.assign({}, gif, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }))), React.createElement(\"input\", {\n      className: \"input grid-item\",\n      placeholder: \"type something\",\n      onChange: this.handleChange,\n      onKeyPress: this.handleKeyPress,\n      value: searchTerm,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    })), React.createElement(UserHint, Object.assign({}, this.state, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/julianwieckardt/Desktop/jiffy/src/App.js"],"names":["React","Component","Gif","Header","UserHint","loading","hintText","loader","randomChoice","arr","randIndex","Math","floor","random","length","App","constructor","props","searchGiphy","searchTerm","setState","response","fetch","json","data","randomGif","console","log","prevState","gifs","error","handleChange","event","value","target","handleKeyPress","key","clearSearch","state","render","gif","map"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport loader from \"./images/loader.svg\";\nimport Gif from \"./Gif\";\n\nconst Header = () => (\n  <div className=\"header grid\">\n    <h1 className=\"title\">Jiffy</h1>\n  </div>\n);\nconst UserHint = ({ loading, hintText }) => (\n  <div className=\"user-hint\">\n    {loading ? <img className=\"block mx-auto\" src={loader} /> : hintText}\n  </div>\n);\n\nconst randomChoice = arr => {\n  const randIndex = Math.floor(Math.random() * arr.length);\n  return arr[randIndex];\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: false,\n      searchTerm: \"\",\n      hintText: \"\",\n      gifs: []\n    };\n  }\n\n  searchGiphy = async searchTerm => {\n    this.setState({\n      loading: true\n    });\n\n    try {\n      const response = await fetch(\n        `https://api.giphy.com/v1/gifs/search?api_key=BNBQdaOJdcjRkyZ8t4aavRBRM4zES6qX&q=${searchTerm}&limit=25&offset=0&rating=PG-13&lang=en`\n      );\n      const { data } = await response.json();\n\n      if (!data.length) {\n        throw `Nothing found for ${searchTerm}`;\n      }\n\n      const randomGif = randomChoice(data);\n      console.log({ randomGif });\n\n      this.setState((prevState, props) => ({\n        ...prevState,\n        gifs: [...prevState.gifs, randomGif],\n        loading: false,\n        hintText: `Hit enter to see more ${searchTerm}`\n      }));\n    } catch (error) {\n      this.setState((prevState, props) => ({\n        ...prevState,\n        hintText: error,\n        loading: false\n      }));\n      console.log(error);\n    }\n  };\n\n  handleChange = event => {\n    const { value } = event.target;\n    this.setState((prevState, props) => ({\n      ...prevState,\n      searchTerm: value,\n      hintText: value.length > 2 ? `hit enter to search ${value}` : \"\"\n    }));\n  };\n\n  handleKeyPress = event => {\n    const { value } = event.target;\n\n    if (value.length > 2 && event.key === \"Enter\") {\n      this.searchGiphy(value);\n    }\n  };\n\n  clearSearch = () => {\n    this.setState((prevState, props) => ({\n      ...prevState,\n      searchTerm: \"\",\n      hintText: \"\",\n      gifs: []\n    }));\n  };\n\n  render() {\n    const { searchTerm, gif } = this.state;\n    return (\n      <div className=\"page\">\n        <Header clearSearch={this.clearSearch} />\n        <div className=\"search grid\">\n          {this.state.gifs.map(gif => (\n            <Gif {...gif} />\n          ))}\n\n          <input\n            className=\"input grid-item\"\n            placeholder=\"type something\"\n            onChange={this.handleChange}\n            onKeyPress={this.handleKeyPress}\n            value={searchTerm}\n          />\n        </div>\n        <UserHint {...this.state} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}